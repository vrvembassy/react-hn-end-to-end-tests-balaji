'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _findProcess = require('find-process');

var _findProcess2 = _interopRequireDefault(_findProcess);

var _chromeRemoteInterface = require('chrome-remote-interface');

var _chromeRemoteInterface2 = _interopRequireDefault(_chromeRemoteInterface);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DevToolsService = function () {
    function DevToolsService() {
        (0, _classCallCheck3.default)(this, DevToolsService);
    }

    (0, _createClass3.default)(DevToolsService, [{
        key: 'beforeSession',
        value: function beforeSession(_, caps) {
            if (caps.browserName !== 'chrome' || caps.version && caps.version < 63) {
                console.error('The wdio-devtools-service currently only supports Chrome version 63 and up');
            }
        }
    }, {
        key: 'before',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var _this = this;

                var _client, host, port;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this._findChromePort();

                            case 2:
                                this.chromePort = _context.sent;
                                _context.next = 5;
                                return this._getCDPClient(this.chromePort);

                            case 5:
                                this.client = _context.sent;


                                /**
                                 * allow to easily access the CDP from the browser object
                                 */
                                browser.addCommand('cdp', function (domain, command) {
                                    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                                    if (!_this.client[domain]) {
                                        throw new Error(`Domain "${domain}" doesn't exist in the Chrome DevTools protocol`);
                                    }

                                    if (!_this.client[domain][command]) {
                                        throw new Error(`The "${domain}" domain doesn't have a method called "${command}"`);
                                    }

                                    return new _promise2.default(function (resolve, reject) {
                                        return _this.client[domain][command](args, function (err, result) {
                                            if (err) {
                                                return reject(new Error(`Chrome DevTools Error: ${result.message}`));
                                            }

                                            return resolve(result);
                                        });
                                    });
                                });

                                /**
                                 * helper method to receive Chrome remote debugging connection data to
                                 * e.g. use external tools like lighthouse
                                 */
                                _client = this.client, host = _client.host, port = _client.port;

                                browser.addCommand('cdpConnection', function () {
                                    return { host, port };
                                });

                                /**
                                 * propagate CDP events to the browser event listener
                                 */
                                this.client.on('event', function (event) {
                                    return browser.emit(event.method || 'event', event.params);
                                });

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function before() {
                return _ref.apply(this, arguments);
            }

            return before;
        }()
    }, {
        key: '_findChromePort',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var ps;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return (0, _findProcess2.default)('name', 'remote-debugging-port');

                            case 2:
                                ps = _context2.sent;


                                if (ps.length === 0) {
                                    console.error(`Couldn't find Chrome process`);
                                }

                                if (ps.length > 1) {
                                    console.error('More than one Chrome process is running');
                                }

                                return _context2.abrupt('return', parseInt(ps[0].cmd.match(/remote-debugging-port=(\d+)/)[1], 10));

                            case 6:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function _findChromePort() {
                return _ref2.apply(this, arguments);
            }

            return _findChromePort;
        }()
    }, {
        key: '_getCDPClient',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(port) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                return _context3.abrupt('return', new _promise2.default(function (resolve) {
                                    return (0, _chromeRemoteInterface2.default)({
                                        port,
                                        host: 'localhost',
                                        target: function target(targets) {
                                            return targets.findIndex(function (t) {
                                                return t.type === 'page';
                                            });
                                        }
                                    }, resolve);
                                }));

                            case 1:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function _getCDPClient(_x2) {
                return _ref3.apply(this, arguments);
            }

            return _getCDPClient;
        }()
    }]);
    return DevToolsService;
}();

exports.default = DevToolsService;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9kZXZ0b29scy5qcyJdLCJuYW1lcyI6WyJEZXZUb29sc1NlcnZpY2UiLCJfIiwiY2FwcyIsImJyb3dzZXJOYW1lIiwidmVyc2lvbiIsImNvbnNvbGUiLCJlcnJvciIsIl9maW5kQ2hyb21lUG9ydCIsImNocm9tZVBvcnQiLCJfZ2V0Q0RQQ2xpZW50IiwiY2xpZW50IiwiYnJvd3NlciIsImFkZENvbW1hbmQiLCJkb21haW4iLCJjb21tYW5kIiwiYXJncyIsIkVycm9yIiwicmVzb2x2ZSIsInJlamVjdCIsImVyciIsInJlc3VsdCIsIm1lc3NhZ2UiLCJob3N0IiwicG9ydCIsIm9uIiwiZXZlbnQiLCJlbWl0IiwibWV0aG9kIiwicGFyYW1zIiwicHMiLCJsZW5ndGgiLCJwYXJzZUludCIsImNtZCIsIm1hdGNoIiwidGFyZ2V0IiwidGFyZ2V0cyIsImZpbmRJbmRleCIsInQiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztJQUVxQkEsZTs7Ozs7OztzQ0FDRkMsQyxFQUFHQyxJLEVBQU07QUFDcEIsZ0JBQUlBLEtBQUtDLFdBQUwsS0FBcUIsUUFBckIsSUFBa0NELEtBQUtFLE9BQUwsSUFBZ0JGLEtBQUtFLE9BQUwsR0FBZSxFQUFyRSxFQUEwRTtBQUN0RUMsd0JBQVFDLEtBQVIsQ0FBYyw0RUFBZDtBQUNIO0FBQ0o7Ozs7Ozs7Ozs7Ozs7O3VDQUcyQixLQUFLQyxlQUFMLEU7OztBQUF4QixxQ0FBS0MsVTs7dUNBQ2UsS0FBS0MsYUFBTCxDQUFtQixLQUFLRCxVQUF4QixDOzs7QUFBcEIscUNBQUtFLE07OztBQUVMOzs7QUFHQUMsd0NBQVFDLFVBQVIsQ0FBbUIsS0FBbkIsRUFBMEIsVUFBQ0MsTUFBRCxFQUFTQyxPQUFULEVBQWdDO0FBQUEsd0NBQWRDLElBQWMsdUVBQVAsRUFBTzs7QUFDdEQsd0NBQUksQ0FBQyxNQUFLTCxNQUFMLENBQVlHLE1BQVosQ0FBTCxFQUEwQjtBQUN0Qiw4Q0FBTSxJQUFJRyxLQUFKLENBQVcsV0FBVUgsTUFBTyxpREFBNUIsQ0FBTjtBQUNIOztBQUVELHdDQUFJLENBQUMsTUFBS0gsTUFBTCxDQUFZRyxNQUFaLEVBQW9CQyxPQUFwQixDQUFMLEVBQW1DO0FBQy9CLDhDQUFNLElBQUlFLEtBQUosQ0FBVyxRQUFPSCxNQUFPLDBDQUF5Q0MsT0FBUSxHQUExRSxDQUFOO0FBQ0g7O0FBRUQsMkNBQU8sc0JBQVksVUFBQ0csT0FBRCxFQUFVQyxNQUFWO0FBQUEsK0NBQXFCLE1BQUtSLE1BQUwsQ0FBWUcsTUFBWixFQUFvQkMsT0FBcEIsRUFBNkJDLElBQTdCLEVBQW1DLFVBQUNJLEdBQUQsRUFBTUMsTUFBTixFQUFpQjtBQUN4RixnREFBSUQsR0FBSixFQUFTO0FBQ0wsdURBQU9ELE9BQU8sSUFBSUYsS0FBSixDQUFXLDBCQUF5QkksT0FBT0MsT0FBUSxFQUFuRCxDQUFQLENBQVA7QUFDSDs7QUFFRCxtREFBT0osUUFBUUcsTUFBUixDQUFQO0FBQ0gseUNBTnVDLENBQXJCO0FBQUEscUNBQVosQ0FBUDtBQU9ILGlDQWhCRDs7QUFrQkE7Ozs7MENBSXVCLEtBQUtWLE0sRUFBcEJZLEksV0FBQUEsSSxFQUFNQyxJLFdBQUFBLEk7O0FBQ2RaLHdDQUFRQyxVQUFSLENBQW1CLGVBQW5CLEVBQW9DO0FBQUEsMkNBQU8sRUFBRVUsSUFBRixFQUFRQyxJQUFSLEVBQVA7QUFBQSxpQ0FBcEM7O0FBRUE7OztBQUdBLHFDQUFLYixNQUFMLENBQVljLEVBQVosQ0FBZSxPQUFmLEVBQXdCLFVBQUNDLEtBQUQ7QUFBQSwyQ0FBV2QsUUFBUWUsSUFBUixDQUFhRCxNQUFNRSxNQUFOLElBQWdCLE9BQTdCLEVBQXNDRixNQUFNRyxNQUE1QyxDQUFYO0FBQUEsaUNBQXhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0FJaUIsMkJBQVksTUFBWixFQUFvQix1QkFBcEIsQzs7O0FBQVhDLGtDOzs7QUFFTixvQ0FBSUEsR0FBR0MsTUFBSCxLQUFjLENBQWxCLEVBQXFCO0FBQ2pCekIsNENBQVFDLEtBQVIsQ0FBZSw4QkFBZjtBQUNIOztBQUVELG9DQUFJdUIsR0FBR0MsTUFBSCxHQUFZLENBQWhCLEVBQW1CO0FBQ2Z6Qiw0Q0FBUUMsS0FBUixDQUFjLHlDQUFkO0FBQ0g7O2tFQUVNeUIsU0FBU0YsR0FBRyxDQUFILEVBQU1HLEdBQU4sQ0FBVUMsS0FBVixDQUFnQiw2QkFBaEIsRUFBK0MsQ0FBL0MsQ0FBVCxFQUE0RCxFQUE1RCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O21IQUdVVixJOzs7OztrRUFDVixzQkFBWSxVQUFDTixPQUFEO0FBQUEsMkNBQWEscUNBQUk7QUFDaENNLDRDQURnQztBQUVoQ0QsOENBQU0sV0FGMEI7QUFHaENZLGdEQUFRLGdCQUFDQyxPQUFEO0FBQUEsbURBQWFBLFFBQVFDLFNBQVIsQ0FBa0IsVUFBQ0MsQ0FBRDtBQUFBLHVEQUFPQSxFQUFFQyxJQUFGLEtBQVcsTUFBbEI7QUFBQSw2Q0FBbEIsQ0FBYjtBQUFBO0FBSHdCLHFDQUFKLEVBSTdCckIsT0FKNkIsQ0FBYjtBQUFBLGlDQUFaLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tCQTVETWpCLGUiLCJmaWxlIjoiZGV2dG9vbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmluZFByb2Nlc3MgZnJvbSAnZmluZC1wcm9jZXNzJ1xuaW1wb3J0IENEUCBmcm9tICdjaHJvbWUtcmVtb3RlLWludGVyZmFjZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGV2VG9vbHNTZXJ2aWNlIHtcbiAgICBiZWZvcmVTZXNzaW9uIChfLCBjYXBzKSB7XG4gICAgICAgIGlmIChjYXBzLmJyb3dzZXJOYW1lICE9PSAnY2hyb21lJyB8fCAoY2Fwcy52ZXJzaW9uICYmIGNhcHMudmVyc2lvbiA8IDYzKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVGhlIHdkaW8tZGV2dG9vbHMtc2VydmljZSBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBDaHJvbWUgdmVyc2lvbiA2MyBhbmQgdXAnKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgYmVmb3JlICgpIHtcbiAgICAgICAgdGhpcy5jaHJvbWVQb3J0ID0gYXdhaXQgdGhpcy5fZmluZENocm9tZVBvcnQoKVxuICAgICAgICB0aGlzLmNsaWVudCA9IGF3YWl0IHRoaXMuX2dldENEUENsaWVudCh0aGlzLmNocm9tZVBvcnQpXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFsbG93IHRvIGVhc2lseSBhY2Nlc3MgdGhlIENEUCBmcm9tIHRoZSBicm93c2VyIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgYnJvd3Nlci5hZGRDb21tYW5kKCdjZHAnLCAoZG9tYWluLCBjb21tYW5kLCBhcmdzID0ge30pID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jbGllbnRbZG9tYWluXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRG9tYWluIFwiJHtkb21haW59XCIgZG9lc24ndCBleGlzdCBpbiB0aGUgQ2hyb21lIERldlRvb2xzIHByb3RvY29sYClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLmNsaWVudFtkb21haW5dW2NvbW1hbmRdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgXCIke2RvbWFpbn1cIiBkb21haW4gZG9lc24ndCBoYXZlIGEgbWV0aG9kIGNhbGxlZCBcIiR7Y29tbWFuZH1cImApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB0aGlzLmNsaWVudFtkb21haW5dW2NvbW1hbmRdKGFyZ3MsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYENocm9tZSBEZXZUb29scyBFcnJvcjogJHtyZXN1bHQubWVzc2FnZX1gKSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXN1bHQpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgfSlcblxuICAgICAgICAvKipcbiAgICAgICAgICogaGVscGVyIG1ldGhvZCB0byByZWNlaXZlIENocm9tZSByZW1vdGUgZGVidWdnaW5nIGNvbm5lY3Rpb24gZGF0YSB0b1xuICAgICAgICAgKiBlLmcuIHVzZSBleHRlcm5hbCB0b29scyBsaWtlIGxpZ2h0aG91c2VcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHsgaG9zdCwgcG9ydCB9ID0gdGhpcy5jbGllbnRcbiAgICAgICAgYnJvd3Nlci5hZGRDb21tYW5kKCdjZHBDb25uZWN0aW9uJywgKCkgPT4gKHsgaG9zdCwgcG9ydCB9KSlcblxuICAgICAgICAvKipcbiAgICAgICAgICogcHJvcGFnYXRlIENEUCBldmVudHMgdG8gdGhlIGJyb3dzZXIgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xpZW50Lm9uKCdldmVudCcsIChldmVudCkgPT4gYnJvd3Nlci5lbWl0KGV2ZW50Lm1ldGhvZCB8fCAnZXZlbnQnLCBldmVudC5wYXJhbXMpKVxuICAgIH1cblxuICAgIGFzeW5jIF9maW5kQ2hyb21lUG9ydCAoKSB7XG4gICAgICAgIGNvbnN0IHBzID0gYXdhaXQgZmluZFByb2Nlc3MoJ25hbWUnLCAncmVtb3RlLWRlYnVnZ2luZy1wb3J0JylcblxuICAgICAgICBpZiAocHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDb3VsZG4ndCBmaW5kIENocm9tZSBwcm9jZXNzYClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdNb3JlIHRoYW4gb25lIENocm9tZSBwcm9jZXNzIGlzIHJ1bm5pbmcnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHBzWzBdLmNtZC5tYXRjaCgvcmVtb3RlLWRlYnVnZ2luZy1wb3J0PShcXGQrKS8pWzFdLCAxMClcbiAgICB9XG5cbiAgICBhc3luYyBfZ2V0Q0RQQ2xpZW50IChwb3J0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gQ0RQKHtcbiAgICAgICAgICAgIHBvcnQsXG4gICAgICAgICAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICAgICAgICAgIHRhcmdldDogKHRhcmdldHMpID0+IHRhcmdldHMuZmluZEluZGV4KCh0KSA9PiB0LnR5cGUgPT09ICdwYWdlJylcbiAgICAgICAgfSwgcmVzb2x2ZSkpXG4gICAgfVxufVxuIl19